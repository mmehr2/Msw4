#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CSpellchecker1 wrapper class

class CSpellchecker1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CSpellchecker1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x2E304293, 0x5DA6, 0x4243, { 0x8B, 0xD8, 0xA7, 0x3, 0xF3, 0x1A, 0xA5, 0x81 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    sceUnknownError = 305,
    sceFileNotFound = 301,
    sceNotValidMainDictionary = 302,
    sceDictonaryNotOpened = 303,
    sceIndexOutOfBounds = 304,
    sceNotValidCustomDictionary = 306,
    sceNoOpenedDictionaries = 307,
    sceNotLinkedToTextControl = 308,
    sceNotValidTextControl = 309,
    sceEmptyString = 310,
    sceNotValidAutoCorrectFile = 311,
    sceAutocorrectReplacementNotAssigned = 312,
    sceNotException = 313,
    sceCannotGenerateStatistics = 314,
    sceNotValidFilename = 315,
    sceFileAlreadyExists = 316,
    sceCannotCreateDictionary = 317,
    sceNoOpenedCustomDictionaries = 318,
    sceUnknownFileVersion = 319,
    sceWordListFileNotFound = 320,
    sceSptFileNotFound = 321,
    sceLexFileNotFound = 322,
    sceWordListFileInvalid = 323,
    sceSptListFileInvalid = 324,
    sceLexFileInvalid = 325,
    sceCodePageNotSupported = 326,
    sceDictionariesNotCompatibile = 327,
    sceMemoryAllocError = 328,
    sceInvalidObjectHandle = 329,
    sceInvalidParameters = 330,
    sceFileOpenError = 331,
    sceFileCreateError = 332
}sceErrorConstants;
enum
{
    sceOnError = 15001,
    sceAutoCorrectDialogClosed = 14006,
    sceOptionsDialogClosed = 14005,
    sceChangeAllCleared = 5005,
    sceWordAddedToChangeAll = 5006,
    sceIgnoreAllCleared = 5004,
    sceWordAddedToIgnore = 5003,
    sceCustomDictionaryCleared = 5002,
    sceWordAdded = 5001,
    sceWordEncountered = 5009,
    sceWordCorrectedManually = 9002,
    sceBadWordTyped = 9001,
    sceWordCorrected = 5008,
    sceBadWord = 5007,
    sceWordAutoCorrected = 9003,
    sceNonModalDialogControlWasClicked = 5010,
    sceCustomSpellcheckingDialog = 5011
}sceEventType;
enum
{
    ctUpperAlpha = 0,
    ctLowerAlpha = 1,
    ctNumber = 2,
    ctPunctation = 3,
    ctPunctationDelimiter = 4,
    ctPunctationConnector = 5,
    ctWhitespace = 6,
    ctUndefined = 7,
    ctAmbiguous = 8
}ctCharType;
enum
{
    scrEntireDocument = 0,
    scrSelectionOnly = 1,
    scrFromCursor = 2
}scrCheckingRange;
enum
{
    scrCheckingComplete = 0,
    scrCancelButtonClicked = 1,
    scrCanceledThroughEvent = 2
}srSpellResult;
enum
{
    scoSpellChecker = 0,
    scoTextStatistics = 1
}scoObjectType;
enum
{
    sdaShowDialog = 0,
    sdaAddWord = 1,
    sdaAutoCorrect = 2,
    sdaCancel = 3,
    sdaChange = 4,
    sdaChangeAll = 5,
    sdaIgnore = 6,
    sdaIgnoreAll = 7,
    sdaUndoLast = 8
}sdaSpellDialogAction;


// Operations
public:

// ISpellChecker

// Functions
//

	LPDISPATCH GenerateStatisticsFromString(LPCTSTR Text)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Text);
		return result;
	}
	LPDISPATCH GenerateStatisticsFromTextControl(long Handle)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Handle);
		return result;
	}
	void InitializeAutoCorrection(LPCTSTR AutoCorrectFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, AutoCorrectFileName);
	}
	void SaveInitializationFile(LPCTSTR InitFile)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, InitFile);
	}
	BOOL get_CorrectTwoInitCaps()
	{
		BOOL result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_CorrectTwoInitCaps(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_CorrectCapsLock()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_CorrectCapsLock(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_CapitalizeSentence()
	{
		BOOL result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_CapitalizeSentence(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoCorrectTextAsYouType()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoCorrectTextAsYouType(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoAddWordsToExceptionList()
	{
		BOOL result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoAddWordsToExceptionList(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL AutoCorrectOptionsDlg()
	{
		BOOL result;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CorrectText(LPCTSTR Text, VARIANT * CorrectedText, BOOL CapitalizeFirstLetter)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PVARIANT VTS_BOOL ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Text, CorrectedText, CapitalizeFirstLetter);
		return result;
	}
	long get_AutoCorrectReplacementCount()
	{
		long result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void AddAutoCorrectReplacement(LPCTSTR WordToBeReplaced, LPCTSTR Replacement)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, WordToBeReplaced, Replacement);
	}
	void RemoveAutoCorrectReplacement(LPCTSTR WordToBeReplaced)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, WordToBeReplaced);
	}
	void GetAutoCorrectReplacement(long Index, VARIANT * WordToBeReplaced, VARIANT * Replacement)
	{
		static BYTE parms[] = VTS_I4 VTS_PVARIANT VTS_PVARIANT ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index, WordToBeReplaced, Replacement);
	}
	long get_FirstLetterExceptionCount()
	{
		long result;
		InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void AddFirstLetterException(LPCTSTR Exception)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Exception);
	}
	void RemoveFirstLetterException(LPCTSTR Exception)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Exception);
	}
	CString GetFirstLetterException(long Index)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Index);
		return result;
	}
	long get_TwoInitCapsExceptionCount()
	{
		long result;
		InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void AddTwoInitCapsException(LPCTSTR Exception)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Exception);
	}
	void RemoveTwoInitCapsException(LPCTSTR Exception)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Exception);
	}
	CString GetTwoInitCapsException(long Index)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Index);
		return result;
	}
	long get_OtherExceptionCount()
	{
		long result;
		InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void AddOtherException(LPCTSTR Exception)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Exception);
	}
	void RemoveOtherException(LPCTSTR Exception)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Exception);
	}
	CString GetOtherException(long Index)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Index);
		return result;
	}
	void OpenDictionary(LPCTSTR DictFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictFileName);
	}
	void CloseDictionary(LPCTSTR DictFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictFileName);
	}
	long get_DictionaryCount()
	{
		long result;
		InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString GetDictionaryPath(long Index)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Index);
		return result;
	}
	void OpenCustomDictionary(LPCTSTR CustomDictFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, CustomDictFileName);
	}
	void CloseCustomDictionary(LPCTSTR CustomDictFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, CustomDictFileName);
	}
	long get_CustomDictionaryCount()
	{
		long result;
		InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString GetCustomDictionaryPath(long Index)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Index);
		return result;
	}
	CString get_ActiveCustomDictionaryPath()
	{
		CString result;
		InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_ActiveCustomDictionaryPath(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void CreateCustomDictionary(LPCTSTR CustomDictFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, parms, CustomDictFileName);
	}
	BOOL get_CaseSensitiveCustomDictionaries()
	{
		BOOL result;
		InvokeHelper(0x49, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_CaseSensitiveCustomDictionaries(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString CheckText(LPCTSTR Text, VARIANT * ExitStatus)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_PVARIANT ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Text, ExitStatus);
		return result;
	}
	BOOL get_IgnoreWordsInUppercase()
	{
		BOOL result;
		InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_IgnoreWordsInUppercase(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_IgnoreWordsWithNumbers()
	{
		BOOL result;
		InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_IgnoreWordsWithNumbers(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AlwaysSuggest()
	{
		BOOL result;
		InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AlwaysSuggest(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void AddWord(LPCTSTR NewWord)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, parms, NewWord);
	}
	void AddToChangeAll(LPCTSTR Find, LPCTSTR Replace)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Find, Replace);
	}
	void AddToIgnoreAll(LPCTSTR Word)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Word);
	}
	void ClearIgnoreAll()
	{
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ClearChangeAll()
	{
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL DoesWordExist(LPCTSTR Word)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Word);
		return result;
	}
	void EmptyCustomDictionary(LPCTSTR DictFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictFileName);
	}
	long CharType(short ch)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ch);
		return result;
	}
	CString GetLanguageName(LPCTSTR DictFileName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, DictFileName);
		return result;
	}
	BOOL OptionsDlg()
	{
		BOOL result;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long get_ObjectType()
	{
		long result;
		InvokeHelper(0x39, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_AllowErrorReporting()
	{
		BOOL result;
		InvokeHelper(0x3a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AllowErrorReporting(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void ShowTextControlPopup()
	{
		InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ShowTextControlPopupAtPos(long x, long y)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x46, DISPATCH_METHOD, VT_EMPTY, NULL, parms, x, y);
	}
	long get_WordsCount()
	{
		long result;
		InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_LinkedTextControlHandle()
	{
		long result;
		InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_LinkedTextControlHandle(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_CheckSpellingAsYouType()
	{
		BOOL result;
		InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_CheckSpellingAsYouType(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x31, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ChangePopup()
	{
		BOOL result;
		InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ChangePopup(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x32, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long CheckTextControl(long __MIDL_0015)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, parms, __MIDL_0015);
		return result;
	}
	BOOL get_UnderlineCurrentlyTypedWord()
	{
		BOOL result;
		InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_UnderlineCurrentlyTypedWord(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_SuggestFromMainDictionariesOnly()
	{
		BOOL result;
		InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_SuggestFromMainDictionariesOnly(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_IgnoreInternetAndFileAddresses()
	{
		BOOL result;
		InvokeHelper(0x4c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_IgnoreInternetAndFileAddresses(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Zoom()
	{
		long result;
		InvokeHelper(0x4d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Zoom(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x4d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ModalSpellCheckingDialog()
	{
		BOOL result;
		InvokeHelper(0x4e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ModalSpellCheckingDialog(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_SpellTopMostWindow()
	{
		BOOL result;
		InvokeHelper(0x4f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_SpellTopMostWindow(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x4f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void WriteLabelsTemplate(LPCTSTR LabelsFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x51, DISPATCH_METHOD, VT_EMPTY, NULL, parms, LabelsFileName);
	}
	void ReadLabelsFromFile(LPCTSTR LabelsFileName, LPCTSTR ErrorsFileName)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x52, DISPATCH_METHOD, VT_EMPTY, NULL, parms, LabelsFileName, ErrorsFileName);
	}
	void SuggestionsSearchDepth(LPCTSTR strDictionaryName, long lDepth)
	{
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x53, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strDictionaryName, lDepth);
	}
	void SuggestionsOftenWords(LPCTSTR strDictionaryName, LPCTSTR strOftenWordsDictionaryName)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x54, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strDictionaryName, strOftenWordsDictionaryName);
	}
	void SuggestionsRules(LPCTSTR strDictionaryName, LPCTSTR strRulesFileName)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x55, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strDictionaryName, strRulesFileName);
	}
	void SuggestionOftenCapitalized(LPCTSTR strDictionaryName, BOOL bWordsOftenCapitalized)
	{
		static BYTE parms[] = VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x56, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strDictionaryName, bWordsOftenCapitalized);
	}
	CString GetReplacement(LPCTSTR Word)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Word);
		return result;
	}
	long GetSuggestionCount(LPCTSTR Word)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Word);
		return result;
	}
	CString GetSuggestion(LPCTSTR Word, long SuggestionIndex)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Word, SuggestionIndex);
		return result;
	}
	void CreateLexFromSpt(LPCTSTR DictionaryName, LPCTSTR DictionaryDescription, LPCTSTR WordListFile, LPCTSTR SptFile, LPCTSTR OutputLexFile, BOOL CaseSensitive)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictionaryName, DictionaryDescription, WordListFile, SptFile, OutputLexFile, CaseSensitive);
	}
	void CreateLexFromCodePage(LPCTSTR DicitionaryName, LPCTSTR DictionaryDescription, LPCTSTR WordListFile, LPCTSTR CodePage, LPCTSTR OutputLexFile, BOOL CaseSensitive)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DicitionaryName, DictionaryDescription, WordListFile, CodePage, OutputLexFile, CaseSensitive);
	}
	void ExtractWordsFromLex(LPCTSTR DictionaryName, LPCTSTR OutputWordList)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictionaryName, OutputWordList);
	}
	void ExportWordsToLex(LPCTSTR DictionaryName, LPCTSTR InputWordList)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x48, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictionaryName, InputWordList);
	}
	void ExtractSptFromLex(LPCTSTR DictionaryFile, LPCTSTR OutputSptFile)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictionaryFile, OutputSptFile);
	}
	void ExportSptToLex(LPCTSTR DictionaryFile, LPCTSTR InputSptFile)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DictionaryFile, InputSptFile);
	}

// Properties
//



};
